#!/usr/bin/env bash
set -euo pipefail

# ---------- dependency check ----------
REQUIRED=(nmap nikto gobuster ffuf sqlmap docker)
MISSING=()
for cmd in "${REQUIRED[@]}"; do
  if ! command -v "$cmd" >/dev/null 2>&1; then
    MISSING+=("$cmd")
  fi
done

if [ "${#MISSING[@]}" -ne 0 ]; then
  echo "[!] Missing required commands: ${MISSING[*]}"
  read -r -p "Run installer script to auto-install dependencies? (requires sudo) [Y/n]: " resp
  resp=${resp:-Y}
  if [[ "${resp,,}" =~ ^y ]]; then
    if [ -f "./install-deps.sh" ]; then
      echo "[*] Running installer..."
      sudo bash ./install-deps.sh
      echo "[*] Installer finished. Re-checking environment..."
      exec "$0" "$@"   # restart script so checks pick up new binaries
    else
      echo "install-deps.sh not found in current directory. Aborting."
      exit 1
    fi
  else
    echo "Continuing without installing missing dependencies. Some features may be unavailable."
  fi
fi
# ---------- end dependency check ----------

# Gooberscan - Security Scanning Tool
# Main entry point for security scanning operations

# ASCII Banner with Border
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                                                                              ‚ïë"
echo "‚ïë          ‚ñó‚ñÑ‚ñÑ‚ññ ‚ñó‚ñÑ‚ññ  ‚ñó‚ñÑ‚ññ ‚ñó‚ñÑ‚ñÑ‚ññ ‚ñó‚ñÑ‚ñÑ‚ñÑ‚ññ‚ñó‚ñÑ‚ñÑ‚ññ  ‚ñó‚ñÑ‚ñÑ‚ññ ‚ñó‚ñÑ‚ñÑ‚ññ ‚ñó‚ñÑ‚ññ ‚ñó‚ññ  ‚ñó‚ññ                  ‚ïë"
echo "‚ïë         ‚ñê‚ñå   ‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå   ‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå   ‚ñê‚ñå   ‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñõ‚ñö‚ññ‚ñê‚ñå                  ‚ïë"
echo "‚ïë         ‚ñê‚ñå‚ñù‚ñú‚ñå‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñõ‚ñÄ‚ñö‚ññ‚ñê‚ñõ‚ñÄ‚ñÄ‚ñò‚ñê‚ñõ‚ñÄ‚ñö‚ññ ‚ñù‚ñÄ‚ñö‚ññ‚ñê‚ñå   ‚ñê‚ñõ‚ñÄ‚ñú‚ñå‚ñê‚ñå ‚ñù‚ñú‚ñå                  ‚ïë"
echo "‚ïë         ‚ñù‚ñö‚ñÑ‚ñû‚ñò‚ñù‚ñö‚ñÑ‚ñû‚ñò‚ñù‚ñö‚ñÑ‚ñû‚ñò‚ñê‚ñô‚ñÑ‚ñû‚ñò‚ñê‚ñô‚ñÑ‚ñÑ‚ññ‚ñê‚ñå ‚ñê‚ñå‚ñó‚ñÑ‚ñÑ‚ñû‚ñò‚ñù‚ñö‚ñÑ‚ñÑ‚ññ‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå  ‚ñê‚ñå                  ‚ïë"
echo "‚ïë                                                                              ‚ïë"
echo "‚ïë                    Gooberscan - Security Scanning Tool                       ‚ïë"
echo "‚ïë                                                                              ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""
echo "Dependencies checked and ready!"
echo ""

# Create reports directory if it doesn't exist
if [ ! -d "reports" ]; then
    echo "[*] Creating reports directory..."
    mkdir -p reports
fi

# Get target URL from user
echo ""
echo "Enter target URL (e.g., https://example.com or http://192.168.1.100):"
echo -n "Target URL: "
read -r TARGET_URL

# Check if URL is empty
if [[ -z "$TARGET_URL" ]]; then
    echo "[!] No URL provided. Exiting."
    exit 1
fi

# Validate URL format
if [[ ! "$TARGET_URL" =~ ^https?:// ]]; then
    echo "[!] Invalid URL format. Please include http:// or https://"
    echo "[!] Example: https://example.com or http://192.168.1.100"
    exit 1
fi

# Confirm the target before starting
echo ""
echo "Target confirmed: $TARGET_URL"
echo "Press Enter to start scanning, or Ctrl+C to cancel..."
read -r

# Extract domain/IP for naming
DOMAIN=$(echo "$TARGET_URL" | sed 's|https\?://||' | sed 's|/.*||' | sed 's|:.*||')
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
REPORT_DIR="reports/${DOMAIN}-${TIMESTAMP}"
REPORT_FILE="${REPORT_DIR}/${DOMAIN}.txt"

echo ""
echo "[*] Target: $TARGET_URL"
echo "[*] Report directory: $REPORT_DIR"
echo "[*] Starting comprehensive security scan..."
echo ""

# Create report directory
mkdir -p "$REPORT_DIR"

# Function to log with timestamp
log() {
    echo "[$(date '+%H:%M:%S')] $1" | tee -a "$REPORT_FILE"
}

# Start comprehensive scan
log "=== Gooberscan Security Report ==="
log "Target: $TARGET_URL"
log "Scan started: $(date)"
log ""

# 1. Nmap Port Scan
log "1. Running Nmap port scan..."
nmap -sS -sV -O -A --script vuln "$DOMAIN" -oN "${REPORT_DIR}/nmap.txt" 2>/dev/null || log "Nmap scan completed with warnings"
log "Nmap scan completed"

# 2. Nikto Web Vulnerability Scan
log "2. Running Nikto web vulnerability scan..."
nikto -h "$TARGET_URL" -output "${REPORT_DIR}/nikto.txt" 2>/dev/null || log "Nikto scan completed with warnings"
log "Nikto scan completed"

# 3. Directory/File Discovery with GoBuster
log "3. Running GoBuster directory discovery..."
gobuster dir -u "$TARGET_URL" -w /usr/share/seclists/Discovery/Web-Content/common.txt -o "${REPORT_DIR}/gobuster.txt" 2>/dev/null || log "GoBuster scan completed with warnings"
log "GoBuster scan completed"

# 4. Directory/File Discovery with ffuf
log "4. Running ffuf directory discovery..."
ffuf -w /usr/share/seclists/Discovery/Web-Content/common.txt -u "$TARGET_URL/FUZZ" -o "${REPORT_DIR}/ffuf.txt" -of json 2>/dev/null || log "ffuf scan completed with warnings"
log "ffuf scan completed"

# 5. SQL Injection Testing with sqlmap
log "5. Running sqlmap SQL injection test..."
sqlmap -u "$TARGET_URL" --batch --crawl=2 --output-dir="${REPORT_DIR}/sqlmap" 2>/dev/null || log "sqlmap scan completed with warnings"
log "sqlmap scan completed"

# 6. WordPress Scan (if applicable)
log "6. Checking for WordPress..."
if curl -s "$TARGET_URL" | grep -i "wp-content\|wordpress" >/dev/null; then
    log "WordPress detected, running WPScan..."
    if command -v wpscan >/dev/null 2>&1; then
        wpscan --url "$TARGET_URL" --no-banner --output "${REPORT_DIR}/wpscan.txt" 2>/dev/null || log "WPScan completed with warnings"
    else
        log "WPScan not available, using Docker..."
        docker run --rm wpscanteam/wpscan --url "$TARGET_URL" --no-banner > "${REPORT_DIR}/wpscan.txt" 2>/dev/null || log "WPScan Docker scan completed with warnings"
    fi
    log "WordPress scan completed"
else
    log "No WordPress detected, skipping WPScan"
fi

# 7. OWASP ZAP Scan (Docker)
log "7. Running OWASP ZAP baseline scan..."
docker run --rm -v "$(pwd)/${REPORT_DIR}:/zap/wrk/:rw" -t owasp/zap2docker-stable zap-baseline.py -t "$TARGET_URL" -J zap-report.json 2>/dev/null || log "ZAP scan completed with warnings"
log "ZAP scan completed"

# Generate summary report
log ""
log "=== Scan Summary ==="
log "Scan completed: $(date)"
log "Target: $TARGET_URL"
log "Report files:"
log "  - Main report: $REPORT_FILE"
log "  - Nmap: ${REPORT_DIR}/nmap.txt"
log "  - Nikto: ${REPORT_DIR}/nikto.txt"
log "  - GoBuster: ${REPORT_DIR}/gobuster.txt"
log "  - ffuf: ${REPORT_DIR}/ffuf.txt"
log "  - sqlmap: ${REPORT_DIR}/sqlmap/"
log "  - WPScan: ${REPORT_DIR}/wpscan.txt (if WordPress detected)"
log "  - ZAP: ${REPORT_DIR}/zap-report.json"

echo ""
echo "üéâ Scan completed successfully!"
echo "üìÅ All reports saved to: $REPORT_DIR"
echo "üìÑ Main report: $REPORT_FILE"
echo ""
