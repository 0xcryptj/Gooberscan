#!/usr/bin/env python3
import json
import sys
from pathlib import Path

def print_security_summary(worklist_dir):
    """Print a comprehensive security summary"""
    
    worklist_path = Path(worklist_dir)
    if not worklist_path.exists():
        print(f"[!] Worklist directory not found: {worklist_dir}")
        return
    
    # Load aggregate data
    aggregate_file = worklist_path / "aggregate.json"
    if aggregate_file.exists():
        with open(aggregate_file) as f:
            data = json.load(f)
    else:
        print(f"[!] Aggregate data not found: {aggregate_file}")
        return
    
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë                                                                              ‚ïë")
    print("‚ïë                    üîç GOOBERSCAN SECURITY SUMMARY üîç                        ‚ïë")
    print("‚ïë                                                                              ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    print()
    
    # Target information
    print(f"üéØ Target: {data.get('run', 'Unknown')}")
    print(f"üìÖ Scan Date: {data.get('run', '').split('-')[-1] if '-' in data.get('run', '') else 'Unknown'}")
    print()
    
    # Hosts and ports
    hosts = data.get('hosts', [])
    if hosts:
        print("üñ•Ô∏è  DISCOVERED HOSTS:")
        for host in hosts:
            ip = host.get('ip', 'Unknown')
            ports = host.get('open_ports', [])
            if ports:
                port_list = ", ".join([f"{p['port']}/{p['service']}" for p in ports])
                print(f"   ‚Ä¢ {ip}: {port_list}")
            else:
                print(f"   ‚Ä¢ {ip}: No open ports")
        print()
    
    # CVEs
    cves = data.get('cves', [])
    if cves:
        print("üö® VULNERABILITIES DETECTED:")
        for cve in cves:
            print(f"   ‚Ä¢ {cve}")
        print()
    else:
        print("‚úÖ No CVEs detected")
        print()
    
    # Exposed endpoints (with response codes)
    exposed = data.get('exposed_endpoints', {})
    total_exposed = sum(len(endpoints) for endpoints in exposed.values())
    
    if total_exposed > 0:
        print("üö® EXPOSED ENDPOINTS DISCOVERED:")
        
        # Critical exposed endpoints (sensitive + 200 OK)
        critical_exposed = exposed.get('critical_exposed', [])
        if critical_exposed:
            print(f"   üî¥ CRITICAL EXPOSED ({len(critical_exposed)} endpoints):")
            for endpoint in critical_exposed[:5]:
                # Clean up the URL
                clean_url = endpoint['full_url'].replace('[32m', '').replace('[0m', '').strip()
                print(f"      ‚Ä¢ {clean_url}")
            if len(critical_exposed) > 5:
                print(f"      ... and {len(critical_exposed) - 5} more")
            print()
        
        # High exposed endpoints (sensitive + other codes)
        high_exposed = exposed.get('high_exposed', [])
        if high_exposed:
            print(f"   üü† HIGH EXPOSED ({len(high_exposed)} endpoints):")
            for endpoint in high_exposed[:5]:
                # Clean up the URL
                clean_url = endpoint['full_url'].replace('[32m', '').replace('[0m', '').strip()
                print(f"      ‚Ä¢ {clean_url}")
            if len(high_exposed) > 5:
                print(f"      ... and {len(high_exposed) - 5} more")
            print()
        
        # Medium exposed endpoints (non-sensitive + 200 OK)
        medium_exposed = exposed.get('medium_exposed', [])
        if medium_exposed:
            print(f"   üü° MEDIUM EXPOSED ({len(medium_exposed)} endpoints):")
            for endpoint in medium_exposed[:5]:
                # Clean up the URL
                clean_url = endpoint['full_url'].replace('[32m', '').replace('[0m', '').strip()
                print(f"      ‚Ä¢ {clean_url}")
            if len(medium_exposed) > 5:
                print(f"      ... and {len(medium_exposed) - 5} more")
            print()
        
        # Protected endpoints (401/403)
        protected = exposed.get('protected_endpoints', [])
        if protected:
            print(f"   üîí PROTECTED ENDPOINTS ({len(protected)} endpoints):")
            for endpoint in protected[:5]:
                # Clean up the URL
                clean_url = endpoint['full_url'].replace('[32m', '').replace('[0m', '').strip()
                print(f"      ‚Ä¢ {clean_url}")
            if len(protected) > 5:
                print(f"      ... and {len(protected) - 5} more")
            print()
    else:
        print("‚úÖ No exposed endpoints detected")
        print()
    
    # Sensitive endpoints (all discovered, regardless of response code)
    sensitive = data.get('sensitive_endpoints', {})
    total_sensitive = sum(len(endpoints) for endpoints in sensitive.values())
    
    if total_sensitive > 0:
    print("üîç SENSITIVE ENDPOINTS DISCOVERED:")
    
    # Extract domain from worklist directory name
    domain = worklist_dir.split('/')[-1].split('-')[0] if '-' in worklist_dir.split('/')[-1] else 'unknown'
    base_url = f"https://{domain}"
    
    for level in ['critical', 'high']:  # Only show critical and high
        endpoints = sensitive.get(level, [])
        if endpoints:
            level_emoji = {'critical': 'üî¥', 'high': 'üü†'}
            print(f"   {level_emoji[level]} {level.upper()} RISK ({len(endpoints)} endpoints):")
            for endpoint in endpoints[:3]:  # Show first 3
                # Clean up the endpoint and create full URL
                clean_endpoint = endpoint.replace(' (Status: 400)', '').replace(' (Status: 429)', '').replace('[33m', '').replace('[0m', '').replace('[32m', '').strip()
                if clean_endpoint.startswith('/'):
                    full_url = f"{base_url}{clean_endpoint}"
                elif clean_endpoint.startswith('http'):
                    full_url = clean_endpoint
                else:
                    full_url = f"{base_url}/{clean_endpoint}"
                print(f"      ‚Ä¢ {full_url}")
            if len(endpoints) > 3:
                print(f"      ... and {len(endpoints) - 3} more")
            print()
    else:
        print("‚úÖ No sensitive endpoints detected")
        print()
    
    # URLs summary
    urls = data.get('urls', [])
    params = data.get('params', [])
    
    print("üìä SCAN STATISTICS:")
    print(f"   ‚Ä¢ Total URLs discovered: {len(urls)}")
    print(f"   ‚Ä¢ Parameterized URLs: {len(params)}")
    print(f"   ‚Ä¢ Sensitive endpoints: {total_sensitive}")
    print(f"   ‚Ä¢ Exposed endpoints: {total_exposed}")
    print(f"   ‚Ä¢ CVEs detected: {len(cves)}")
    print()
    
    # Recommendations
    print("üí° SECURITY RECOMMENDATIONS:")
    
    # Critical exposed endpoints (highest priority)
    if exposed.get('critical_exposed'):
        print("   üö® CRITICAL EXPOSED:")
        print("      ‚Ä¢ IMMEDIATE ACTION: Sensitive endpoints are fully accessible (200 OK)")
        print("      ‚Ä¢ Secure or remove these endpoints immediately")
        print("      ‚Ä¢ Implement authentication and access controls")
        print("      ‚Ä¢ Test for unauthorized access")
    
    # High exposed endpoints
    if exposed.get('high_exposed'):
        print("   üî¥ HIGH EXPOSED:")
        print("      ‚Ä¢ Sensitive endpoints partially exposed (redirects/auth required)")
        print("      ‚Ä¢ Review authentication mechanisms")
        print("      ‚Ä¢ Test for authentication bypass")
    
    # Sensitive endpoints (regardless of exposure)
    if sensitive.get('critical'):
        print("   üî¥ CRITICAL SENSITIVE:")
        print("      ‚Ä¢ Immediately secure or remove admin/management interfaces")
        print("      ‚Ä¢ Implement strong authentication for sensitive endpoints")
        print("      ‚Ä¢ Review database access controls")
    
    if sensitive.get('high'):
        print("   üü† HIGH SENSITIVE:")
        print("      ‚Ä¢ Secure API endpoints with proper authentication")
        print("      ‚Ä¢ Implement file upload restrictions")
        print("      ‚Ä¢ Review configuration file access")
    
    # Protected endpoints
    if exposed.get('protected_endpoints'):
        print("   üîí PROTECTED ENDPOINTS:")
        print("      ‚Ä¢ Endpoints require authentication (401/403)")
        print("      ‚Ä¢ Verify authentication mechanisms are secure")
        print("      ‚Ä¢ Test for authentication bypass vulnerabilities")
    
    if cves:
        print("   üö® VULNERABILITIES:")
        print("      ‚Ä¢ Update affected software immediately")
        print("      ‚Ä¢ Apply security patches")
        print("      ‚Ä¢ Consider using Metasploit RC for targeted testing")
    
    if not cves and not exposed.get('critical_exposed') and not sensitive.get('critical'):
        print("   ‚úÖ No critical issues detected")
        print("      ‚Ä¢ Continue monitoring for new vulnerabilities")
        print("      ‚Ä¢ Regular security scans recommended")
    
    print()
    print("üìÅ Generated Files:")
    print(f"   ‚Ä¢ Worklists: {worklist_dir}")
    print(f"   ‚Ä¢ Sensitive endpoints: {worklist_dir}/sensitive_*.txt")
    print(f"   ‚Ä¢ Exposed endpoints: {worklist_dir}/exposed_*.txt")
    print(f"   ‚Ä¢ CVEs: {worklist_dir}/cves.txt")
    print(f"   ‚Ä¢ URLs: {worklist_dir}/urls.txt")
    print(f"   ‚Ä¢ Parameters: {worklist_dir}/params.txt")
    
    # Check for generated tools
    audit_dir = Path("audit")
    if audit_dir.exists():
        target_name = data.get('run', '').split('-')[0] if '-' in data.get('run', '') else 'unknown'
        msf_rc = audit_dir / f"{target_name}-auto.rc"
        if msf_rc.exists():
            print(f"   ‚Ä¢ Metasploit RC: {msf_rc}")
        
        burp_config = Path("burp") / f"{target_name}_config.json"
        if burp_config.exists():
            print(f"   ‚Ä¢ BurpSuite config: {burp_config}")
    
    print()
    print("üéØ Next Steps:")
    if cves:
        print("   1. Review detected CVEs and apply patches")
        print("   2. Use generated Metasploit RC for targeted testing")
    if sensitive.get('critical') or sensitive.get('high'):
        print("   3. Manually test sensitive endpoints for authentication bypass")
        print("   4. Use BurpSuite with generated configuration")
    print("   5. Run additional targeted scans as needed")
    print("   6. Document findings and remediation steps")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: security_summary.py <worklist-directory>")
        print("Example: security_summary.py worklists/www.example.com-20240101_120000")
        sys.exit(1)
    
    worklist_dir = sys.argv[1]
    print_security_summary(worklist_dir)
